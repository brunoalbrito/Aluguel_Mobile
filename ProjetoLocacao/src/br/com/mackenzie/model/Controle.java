package br.com.mackenzie.model;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.locks.StampedLock;
import java.util.logging.Level;
import java.util.logging.Logger;
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Locacao
//  @ File Name : Controle.java
//  @ Date : 23/05/2016
//  @ Author : 
//
//

public class Controle {

    private List<Cliente> clientes;
    private List<Produto> produtos;
    private List<Fornecedor> fornecedores;
    private List<Locacao> locacoes;
    private Scanner entradaString = new Scanner(System.in);
    private Scanner entradaNumerica = new Scanner(System.in);

    public Controle() {
        //Inicializando lista com elementos do sistema
        clientes = new ArrayList<Cliente>();
        fornecedores = new ArrayList<Fornecedor>();
        produtos = new ArrayList<Produto>();
        locacoes = new ArrayList<Locacao>();

        //Lendo arquivos Txt que possuem elementos do sistema já salvos
        inicializarClientes("clientes.txt");
        inicializarFornecedores("fornecedores.txt");
        inicializarProdutos("produtos.txt");
        //inicializarLocacoes("locacoes.txt");
    }

    public List<Cliente> getClientes() {
        return clientes;
    }

    public List<Produto> getProdutos() {
        return produtos;
    }

    public List<Fornecedor> getFornecedores() {
        return fornecedores;
    }

    public List<Locacao> getLocacoes() {
        return locacoes;
    }

    //Métodos para a classe Cliente
    public Cliente consultaCliente(long codigo) {
        //verifica, a partir do CPF ou CNPJ, se o cliente já está cadastrado no Sistema
        //Percorrendo lista de clientes para encontrar cliente desejado
        for (Cliente cliente : clientes) {
            if (cliente instanceof Fisico) {
                Fisico fisico = (Fisico) cliente;
                if (fisico.getCPF() == codigo) {
                    return fisico;
                }
            } else {
                Juridico juridico = (Juridico) cliente;
                if (juridico.getCNPJ() == codigo) {
                    return juridico;
                }
            }
        }
        return null;
    }

    public void achaCliente() {

        System.out.println("Digite o CPF ou CNPJ:");
        Cliente c1 = consultaCliente(entradaNumerica.nextLong());
        if (c1 != null) {
            System.out.println("Cliente: " + c1.toString() + " / Endereço: " + c1.getEndereco() + " / Telefone: " + c1.getTelefone() + "");
        } else {
            System.out.println("Cliente não encontrado!");
        }

    }

    public void listarClientes() {
        //lista todos os clientes cadastrados
        for (Cliente cliente : clientes) {
            System.out.println(cliente.toString());
        }
    }

    public void cadastrarCliente() {

        //Método para validar informações digitadas pelo funcionário da loja, validá-las e criar um novo Cliente
        System.out.println("Novo cliente 1 -Físico ou 2 - Jurídico?");
        int opcao = entradaNumerica.nextInt();

        if (opcao == 1) {
            System.out.println("Nome: ");
            String nome = entradaString.nextLine();

            System.out.println("CPF: ");
            long CPF = entradaNumerica.nextLong();

            System.out.println("Telefone: ");
            int tel = entradaNumerica.nextInt();

            System.out.println("Endereço: ");
            String endereco = entradaString.nextLine();

            Fisico f = new Fisico(nome, CPF, endereco, tel);
            clientes.add(f);
        }
        if (opcao == 2) {

            System.out.println("Nome Fantasia: ");
            String nome = entradaString.nextLine();

            System.out.println("CNPJ: ");
            long CNPJ = entradaNumerica.nextLong();

            System.out.println("Telefone: ");
            int tel = entradaNumerica.nextInt();

            System.out.println("Endereço: ");
            String endereco = entradaString.nextLine();

            Juridico j = new Juridico(nome, CNPJ, endereco, tel);
            clientes.add(j);
        }

    }

    public void alterarDadosCliente() {

        //altera os dados dos clientes    
        System.out.println("Digite o CPF ou CNPJ");

        long codigo = entradaNumerica.nextLong();

        Cliente c = consultaCliente(codigo);

        if (c != null) {

            if (c instanceof Fisico) {
                Fisico f = ((Fisico) c);
                System.out.println(f.toString());
                System.out.println("Informe o novo nome");
                String nomeCompleto = entradaString.nextLine();
                System.out.println("Informe o novo CPF");
                long CPF = entradaNumerica.nextLong();
                System.out.println("Informe o novo Endereço");
                String endereco = entradaString.nextLine();
                System.out.println("Informe o novo Telefone");
                int telefone = entradaNumerica.nextInt();

                f.alterarDados(nomeCompleto, CPF, endereco, telefone);
            }
            if (c instanceof Juridico) {
                Juridico j = ((Juridico) c);
                System.out.println(j.toString());
                System.out.println("Informe o novo Nome Fantasia");
                String nomeFantasia = entradaString.nextLine();
                System.out.println("Informe o novo CPF");
                long CNPJ = entradaNumerica.nextLong();
                System.out.println("Informe o novo CNPJ");
                String endereco = entradaString.nextLine();
                System.out.println("Informe o novo Telefone");
                int telefone = entradaNumerica.nextInt();
                j.alterarDados(nomeFantasia, CNPJ, endereco, telefone);
            }

        } else {
            System.out.println("Cliente nao encontrado");
        }

    }

    //Métodos para a Classe Produto
    public void acrescentarProduto() throws ParseException {

        System.out.println("Criando um produto:"
                + "\n Primeiramente selecione se seu produto é 1 - Smartphone ou 2 - Tablet");
        int opc = entradaNumerica.nextInt();

        System.out.println("Modelo do produto: ");
        String modeloProduto = entradaString.nextLine();
        System.out.println("Ano de fabricação (aaaa)");
        int data = entradaNumerica.nextInt();
        System.out.println("Polegadas na tela: ");
        double pol = entradaNumerica.nextDouble();
        System.out.println("Resolução da tela (ppi):");
        String telaResolucao = entradaString.nextLine();
        System.out.println("Fabricante: ");
        String fabricante = entradaString.nextLine();
        System.out.println("Fornecedor cadastrado no sistema: ");
        long codigoF = entradaNumerica.nextLong();
        Fornecedor f = selecionarFornecedor(codigoF);
        System.out.println("Preço por dia: ");
        double preco = entradaNumerica.nextDouble();
        System.out.println("Acessorios: ");
        String acess = entradaString.nextLine();

        if (opc == 1) {

            System.out.println("Resolução da camera: ");
            double resolu = entradaNumerica.nextDouble();
            System.out.println("Rede: 3 - 3G / 4 - 4G");
            char rede = entradaString.nextLine().charAt(0);
            System.out.println("Dual chip 1 - Sim / 2 - Não");
            boolean dual = (entradaNumerica.nextInt() == 1);
            System.out.println("Sistema Operacional "
                    + "\n 1 - ANDROID"
                    + "\n 2 - IOS"
                    + "\n 3 - WINDOWS PHONE "
                    + "\n 4 - NAO INFORMADO");
            int choose = entradaNumerica.nextInt();

            SO sistemaO = null;
            switch (choose) {
                case 1:
                    sistemaO = SO.ANDROID;
                    break;
                case 2:
                    sistemaO = SO.IOS;
                    break;
                case 3:
                    sistemaO = SO.WINDOWS_PHONE;
                    break;
                case 4:
                    sistemaO = SO.NAOINFORMADO;
                    break;
            }

            Smartphone s = new Smartphone(modeloProduto, sistemaO, data, pol, telaResolucao, fabricante, f, preco, StatusProduto.DISPONIVEL, acess, resolu, rede, dual);

            produtos.add(s);
        }
        if (opc == 2) {

            System.out.println("Tem camera? 1 - Sim / 2 - Não");
            boolean camera = (entradaNumerica.nextInt() == 1);
            System.out.println("Acessa a rede? 1 - Sim / 2 - Não");
            boolean conexao = (entradaNumerica.nextInt() == 1);
            System.out.println("Sistema Operacional "
                    + "\n1 - ANDROID"
                    + "\n2 - IOS"
                    + "\n3 - WINDOWS PHONE "
                    + "\n4 - NAO INFORMADO");
            int choose = entradaNumerica.nextInt();

            SO sistemaO = null;
            switch (choose) {
                case 1:
                    sistemaO = SO.ANDROID;
                    break;
                case 2:
                    sistemaO = SO.IOS;
                    break;
                case 3:
                    sistemaO = SO.WINDOWS_PHONE;
                    break;
                case 4:
                    sistemaO = SO.NAOINFORMADO;
                    break;
            }

            Tablet t = new Tablet(modeloProduto, sistemaO, data, pol, telaResolucao, fabricante, f, preco, StatusProduto.DISPONIVEL, acess, camera, conexao);

            produtos.add(t);
        }

    }

    public void visualizarProdutos() {
        //Mostra todos os produtos disponíveis
        System.out.println("Todos os produtos disponiveis");
        for (Produto p : produtos) {
            if (p.getStatusAlugado() == StatusProduto.DISPONIVEL) {
                System.out.println(p.visualizarProdutos());
            }
        }
    }

    public void alterarDadosProduto() throws ParseException {
        System.out.println("Qual o modelo que você deseja alterar os dados?");
        Produto p = selecionarProduto(entradaString.nextLine());
        if (p != null) {

            System.out.println(p.visualizarProdutos());

            if (p instanceof Smartphone) {
                System.out.println("Digite o novo modelo: ");
                String modeloProduto = entradaString.nextLine();
                System.out.println("Sistema Operacional "
                        + "\n1 - ANDROID"
                        + "\n2 - IOS"
                        + "\n3 - WINDOWS PHONE "
                        + "\n4 - NAO INFORMADO");
                int choose = entradaNumerica.nextInt();
                SO sistemaO = null;
                switch (choose) {
                    case 1:
                        sistemaO = SO.ANDROID;
                        break;
                    case 2:
                        sistemaO = SO.IOS;
                        break;
                    case 3:
                        sistemaO = SO.WINDOWS_PHONE;
                        break;
                    case 4:
                        sistemaO = SO.NAOINFORMADO;
                        break;
                }
                SimpleDateFormat formatador = new SimpleDateFormat("yyyy");
                System.out.println("Ano de fabricação (aaaa)");
                int data = entradaNumerica.nextInt();
                System.out.println("Polegadas na tela: ");
                double pol = entradaNumerica.nextDouble();
                System.out.println("Resolução da tela (ppi):");
                String telaResolucao = entradaString.nextLine();
                System.out.println("Fabricante: ");
                String fabricante = entradaString.nextLine();
                System.out.println("Fornecedor cadastrado no sistema: ");
                long codigoF = entradaNumerica.nextLong();
                Fornecedor f = selecionarFornecedor(codigoF);
                System.out.println("Preço por dia: ");
                double preco = entradaNumerica.nextDouble();
                System.out.println("Acessorios: ");
                String acess = entradaString.nextLine();
                System.out.println("Resolução da camera: ");
                double resolu = entradaNumerica.nextDouble();
                System.out.println("Rede: 3 - 3G / 4 - 4G");
                char rede = entradaString.nextLine().charAt(0);
                System.out.println("Dual chip 1 - Sim / 2 - Não");
                boolean dual = (entradaNumerica.nextInt() == 1);
                ((Smartphone) p).alterarDadosProduto(modeloProduto, sistemaO, data, pol, telaResolucao, fabricante, f, preco, StatusProduto.DISPONIVEL, acess, resolu, rede, dual);

            }
            if (p instanceof Tablet) {
                System.out.println("Digite o novo modelo: ");
                String modeloProduto = entradaString.nextLine();
                System.out.println("Sistema Operacional "
                        + "\n1 - ANDROID"
                        + "\n2 - IOS"
                        + "\n3 - WINDOWS PHONE "
                        + "\n4 - NAO INFORMADO");
                int choose = entradaNumerica.nextInt();
                SO sistemaO = null;
                switch (choose) {
                    case 1:
                        sistemaO = SO.ANDROID;
                        break;
                    case 2:
                        sistemaO = SO.IOS;
                        break;
                    case 3:
                        sistemaO = SO.WINDOWS_PHONE;
                        break;
                    case 4:
                        sistemaO = SO.NAOINFORMADO;
                        break;
                }

                System.out.println("Ano de fabricação (aaaa)");
                int data = entradaNumerica.nextInt();
                System.out.println("Polegadas na tela: ");
                double pol = entradaNumerica.nextDouble();
                System.out.println("Resolução da tela (ppi):");
                String telaResolucao = entradaString.nextLine();
                System.out.println("Fabricante: ");
                String fabricante = entradaString.nextLine();
                System.out.println("Fornecedor cadastrado no sistema: ");
                long codigoF = entradaNumerica.nextLong();
                Fornecedor f = selecionarFornecedor(codigoF);
                System.out.println("Preço por dia: ");
                double preco = entradaNumerica.nextDouble();
                System.out.println("Acessorios: ");
                String acess = entradaString.nextLine();
                System.out.println("Possui Camera: 1- Sim 2-Não");

                int cameraP = entradaNumerica.nextInt();
                boolean camera = false;
                if (cameraP == 1) {
                    camera = true;
                }
                if (cameraP == 2) {
                    camera = false;
                }

                System.out.println("Possui Acesso à Rede: 1- Sim 2-Não");
                boolean rede = (entradaNumerica.nextInt() == 1);

                ((Tablet) p).alterarDadosProduto(modeloProduto, sistemaO, data, pol, telaResolucao, fabricante, f, preco, StatusProduto.ALUGADO, acess, camera, rede);
            }

        } else {
            System.out.println("Não encontrado!");
        }

    }

    public void excluirProduto() {
        //exclui da lista um determinado produto
        System.out.println("Qual produto voce deseja excluir?");
        Produto p = selecionarProduto(entradaString.nextLine());
        if (p != null) {

            System.out.println(p.visualizarProdutos());
            System.out.println("Deseja excluir esse? 1- sim / 2 - não");
            if (entradaNumerica.nextInt() == 1) {

                produtos.remove(p);

            }

        } else {
            System.out.println("não encontrado");
        }

    }

    public Produto selecionarProduto(String modelo) {
        //busca por modelo e devolve um produto
        for (Produto p : produtos) {
            if (p.getModeloProduto().contains(modelo)) {
                return p;
            }
        }
        return null;

    }

    //Métodos para a Classe Fornecedor
    public void acrescentarFornecedor() {
        //pede os dados de entrada e cria um fornecedor
        System.out.println("Nome do Fornecedor: ");
        String nome = entradaString.nextLine();
        System.out.println("Telefone para contato: ");
        int tel = entradaNumerica.nextInt();
        System.out.println("CNPJ do Fornecedor: ");
        long cnpj = entradaNumerica.nextLong();

        Fornecedor f = new Fornecedor(nome, tel, cnpj);
        fornecedores.add(f);

    }

    public void consultarFonecedor() {

        //consulta e devolve o fornecedor se existente
        System.out.println("Qual o CNPJ do fornecedor?");
        long cod = entradaNumerica.nextLong();

        System.out.println("Resultados para a sua busca:");
        for (Fornecedor f : fornecedores) {
            if (f.getCod() == cod) {
                System.out.println("CNPJ: " + f.getCod() + " / Nome: " + f.getNomeFornecedor() + " / tel: " + f.getTel());
            }
        }

    }

    public void listarFonecedores() {

        //mostra todos os fornecedores ao ser chamado
        System.out.println("Lista de todos os fornecedores:");
        for (Fornecedor f : fornecedores) {
            System.out.println("CNPJ: " + f.getCod() + " / Nome: " + f.getNomeFornecedor() + " / tel: " + f.getTel());
        }
    }

    public void alterarDadosFornecedor() {

        //atualiza os dados de um fornecedor selecionado
        System.out.println("Qual o CNPJ do fornecedor?");
        long selec = entradaNumerica.nextLong();

        if (selecionarFornecedor(selec) != null) {
            Fornecedor f = selecionarFornecedor(selec);

            System.out.println("Novo nome:");
            String novoNome = entradaString.nextLine();
            System.out.println("Novo telefone:");
            int novoTel = entradaNumerica.nextInt();

            f.setNomeFornecedor(novoNome);
            f.setTel(novoTel);
        } else {
            System.out.println("Fornecedor não encontrado");
        }

    }

    public void excluirFornecedor() {

        //exclui diretamente um fornecedor do array
        System.out.println("Qual o fornecedor?");
        int selec = entradaNumerica.nextInt();

        if (selecionarFornecedor(selec) != null) {
            fornecedores.remove(selecionarFornecedor(selec));
        } else {
            System.out.println("Fornecedor não encontrado");
        }

    }

    public Fornecedor selecionarFornecedor(long cod) {
        //procura um Fornecedor pelo codigo e o devolve quando encontrá-lo
        for (Fornecedor f : fornecedores) {
            if (f.getCod() == cod) {
                return f;
            }
        }
        return null;
    }

    //Métodos para a Classe Locação
    public Locacao selecionaLocacao(int cod) {
        //retorna uma locacao atraves de um codigo especifico
        for (Locacao l : locacoes) {
            if (l.getId() == cod) {
                return l;
            }
        }
        return null;
    }

    public void registrarLocacao() throws ParseException {
        //cria uma nova locacao
        SimpleDateFormat data = new SimpleDateFormat("dd/MM/yyyy");
        Cliente c;
        Produto p;
        System.out.println("Registrando nova locação");

        System.out.println("Data da retirada (dd/mm/aaaa) :");
        Date dataRetirada = data.parse(entradaString.nextLine());
        System.out.println("Data prevista (dd/mm/aaaa) :");
        Date dataPrevista = data.parse(entradaString.nextLine());

        System.out.println("Selecione Cliente por CPF ou CNPJ:");
        c = consultaCliente(entradaNumerica.nextLong());

        System.out.println("Selecione produto por modelo:");
        p = selecionarProduto(entradaString.nextLine());

        if ((c != null) && (p != null)) {
            Locacao l = new Locacao(c, p, dataRetirada, dataPrevista);
            locacoes.add(l);
        } else {
            System.out.println("Produto ou Cliente inexistentes, por favor, verifique o cadastro dos mesmos!");
        }

    }

    public void finalizarLocacao() throws ParseException {
        //termina uma locacao definindo data de termino e valor a ser pago
        SimpleDateFormat data = new SimpleDateFormat("dd/MM/yyyy");
        System.out.println("Selecione a locação pelo seu codigo para finaliza-la:");
        Locacao l = selecionaLocacao(entradaNumerica.nextInt());
        System.out.println("Data da devolução(dd/mm/aaaa):");
        Date DataDevolucao = data.parse(entradaString.nextLine());
        System.out.println("Valor a ser pago referente à finalização:"
                + l.gerarValorPagar(DataDevolucao));

    }

    public void gerarRelatorio() {
        //percorre o locacao mostrando os dados de cada uma
        for (Locacao l : locacoes) {
            System.out.println(l.toString());
        }

    }

    //Métodos para inicializar lista de componenetes do sistema a partir de arquivos txt
    private void inicializarClientes(String file) {
        try {
            BufferedReader in = new BufferedReader(new FileReader(file));
            String linha;
            while ((linha = in.readLine()) != null) {
                String[] atribs = linha.split(":");
                if (atribs[0].equals("F")) {
                    clientes.add(new Fisico(atribs[1], Long.parseLong(atribs[2]), atribs[3], Integer.parseInt(atribs[4])));
                } else {
                    clientes.add(new Juridico(atribs[1], Long.parseLong(atribs[2]), atribs[3], Integer.parseInt(atribs[4])));
                }
            }
        } catch (IOException | NumberFormatException e) {
            System.exit(-1);
        }
    }

    private void inicializarFornecedores(String file) {

        try {
            BufferedReader in = new BufferedReader(new FileReader(file));
            String linha;
            while ((linha = in.readLine()) != null) {
                fornecedores.add(new Fornecedor(linha.split(":")[0], Integer.parseInt(linha.split(":")[1]), Long.parseLong(linha.split(":")[2])));
            }
            in.close();
        } catch (IOException | NumberFormatException e) {
            System.exit(-1);
        }

    }

    private void inicializarProdutos(String file) {

        try {
            BufferedReader in = new BufferedReader(new FileReader(file));
            String linha;
            while ((linha = in.readLine()) != null) {
                String[] infos = linha.split(":");
                String instancia = infos[0];
                String modeloProduto = infos[1];
                SO so = SO.valueOf(infos[2]);
                int anoFabricacao = Integer.parseInt(infos[3]);
                double telaPol = Double.parseDouble(infos[4]);
                String telaResolucao = infos[5];
                String fabricante = infos[6];
                Fornecedor fornecedor = selecionarFornecedor(Long.parseLong(infos[7]));
                double precoPorDia = Double.parseDouble(infos[8]);
                StatusProduto statusProduto = StatusProduto.valueOf(infos[9]);
                String acessorio = infos[10];

                if (instancia.equals("T")) {
                    boolean camera = (infos[11].equals("true")) ? true : false;
                    boolean acessoRede = (infos[12].endsWith("true")) ? true : false;
                    produtos.add(new Tablet(modeloProduto, so, anoFabricacao, telaPol, telaResolucao, fabricante, fornecedor, precoPorDia, statusProduto, acessorio, camera, acessoRede));
                } else {
                    double cameraResolucao = Double.parseDouble(infos[11]);
                    char tipoRede = infos[12].charAt(0);
                    boolean dualChip = Boolean.parseBoolean(infos[13]);
                    produtos.add(new Smartphone(modeloProduto, so, anoFabricacao, telaPol, telaResolucao, fabricante, fornecedor, precoPorDia, statusProduto, acessorio, cameraResolucao, tipoRede, dualChip));
                }
            }

        } catch (Exception e) {
            System.exit(-1);
        }

    }

    private void inicializarLocacoes(String file) {
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        try {
            BufferedReader in = new BufferedReader(new FileReader(file));
            String line;
            while ((line = in.readLine()) != null) {
                String[] infos = line.split(":");
                Date dataRetirada = (infos[0].equals("null")) ? null : format.parse(infos[0]);
                Date dataPrevista = (infos[1].equals("null")) ? null : format.parse(infos[1]);
                Date dataDevolucao = (infos[2].equals("null")) ? null : format.parse(infos[2]);
                double precoTotal = Double.parseDouble(infos[3]);
                double valorMulta = Double.parseDouble(infos[4]);
                Cliente cliente = consultaCliente(Long.parseLong(infos[5]));
                Produto produto = selecionarProduto(infos[6]);
                int id = Integer.parseInt(infos[7]);
                locacoes.add(new Locacao(cliente, produto, dataRetirada, dataPrevista, id));
            }
        } catch (Exception e) {
            System.exit(-1);
        }

    }

    //Métodos para gravar os componentes criados no arquivo txt. Estes método serão chamados no fim da execução do sistema
    public void dumpClientes() {
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter("clientes.txt"));
            for (Cliente cliente : clientes) {
                if (cliente instanceof Fisico) {
                    out.write("F:" + ((Fisico) cliente).getNomeCompleto()
                            + ":" + ((Fisico) cliente).getCPF()
                            + ":" + cliente.getEndereco()
                            + ":" + cliente.getTelefone() + System.lineSeparator());
                } else {
                    out.write("J:" + ((Juridico) cliente).getNomeFantasia()
                            + ":" + ((Juridico) cliente).getCNPJ()
                            + ":" + cliente.getEndereco()
                            + ":" + cliente.getTelefone() + System.lineSeparator());
                }
            }
            out.flush();
            out.close();
        } catch (Exception ex) {
            System.exit(-1);
        }
    }

    public void dumpFornecedores() {
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter("fornecedores.txt"));
            for (Fornecedor f : fornecedores) {
                out.write(f.getNomeFornecedor() + ":" + f.getTel() + ":" + f.getCod());
            }
            out.flush();
            out.close();
        } catch (Exception ex) {
            System.exit(-1);
        }

    }

    public void dumpProdutos() {

        try {
            BufferedWriter out = new BufferedWriter(new FileWriter("produtos.txt"));
            for (Produto produto : produtos) {
                StringBuffer linha = new StringBuffer();
                if (produto instanceof Tablet) {
                    linha.append("T:");
                } else {
                    linha.append("S:");
                }
                linha.append(produto.getModeloProduto()
                        + ":" + produto.getSistemaOperacional()
                        + ":" + produto.getAnoFabricacao()
                        + ":" + produto.getTelaPol()
                        + ":" + produto.getTelaResolucao()
                        + ":" + produto.getFabricante()
                        + ":" + produto.getFornecedor().getCod()
                        + ":" + produto.getPrecoPorDia()
                        + ":" + produto.getStatusAlugado()
                        + ":" + produto.getAcessorios());

                if (produto instanceof Tablet) {
                    linha.append(":" + ((Tablet) produto).isCamera()
                            + ":" + ((Tablet) produto).isAcessoRede());
                } else {
                    linha.append(":" + ((Smartphone) produto).getCameraResolucao()
                            + ":" + ((Smartphone) produto).getTipoRede()
                            + ":" + ((Smartphone) produto).isDualChip());
                }
                out.write(linha.toString() + System.lineSeparator());
            }
            out.flush();
            out.close();
        } catch (Exception e) {
            System.exit(-1);
        }
    }

    public void dumpLocacoes() {
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter("locacoes.txt"));
            String dataRetirada, dataPrevista, dataDevolucao;
            double precoTotal, valorMulta;
            long codigo;

            for (Locacao l : locacoes) {
                dataRetirada = (l.getDataRetirada() == null) ? "null" : format.format(l.getDataRetirada());
                dataPrevista = (l.getDataPrevista() == null) ? "null" : format.format(l.getDataPrevista());
                dataDevolucao = (l.getDataDevolucao() == null) ? "null" : format.format(l.getDataDevolucao());
                precoTotal = (l.getPrecoTotal() != 0) ? l.getPrecoTotal() : 0.0;
                valorMulta = (l.getValorMulta() != 0) ? l.getValorMulta() : 0.0;
                codigo = (l.getCliente() instanceof Fisico) ? ((Fisico) l.getCliente()).getCPF() : ((Juridico) l.getCliente()).getCNPJ();

                out.write(dataRetirada
                        + ":" + dataPrevista
                        + ":" + dataDevolucao
                        + ":" + precoTotal
                        + ":" + valorMulta
                        + ":" + codigo
                        + ":" + l.getProduto().getModeloProduto()
                        + ":" + l.getId());
            }
            out.flush();
            out.close();
        } catch (Exception ex) {
            System.exit(-1);
        }

    }
}
