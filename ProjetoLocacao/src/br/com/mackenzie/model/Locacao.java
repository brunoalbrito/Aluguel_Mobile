package br.com.mackenzie.model;

import java.text.SimpleDateFormat;
import java.util.Date;
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Locacao
//  @ File Name : Locacao.java
//  @ Date : 23/05/2016
//  @ Author : 
//

public class Locacao {

    private Date dataRetirada;
    private Date dataPrevista;
    private Date dataDevolucao;
    private double precoTotal;
    private double valorMulta;
    private Cliente cliente;
    private Produto produto;
    private int id;
    private static int idLast = 0;

    public Locacao(Cliente cliente, Produto produto, Date dataRetirada, Date dataPrevista) {
        //construtor nao inicializa data de devolução, pois essa é cadastrada na devolução
        this.cliente = cliente;
        this.produto = produto;
        valorMulta = 10;
        this.dataRetirada = dataRetirada;
        this.dataPrevista = dataPrevista;
        this.id = idLast++;
        produto.alterarStatusProduto(StatusProduto.ALUGADO);
    }
    
    public Locacao(Cliente cliente, Produto produto, Date dataRetirada, Date dataPrevista, int id) {
        //construtor nao inicializa data de devolução, pois essa é cadastrada na devolução
        this.cliente = cliente;
        this.produto = produto;
        valorMulta = 10;
        this.dataRetirada = dataRetirada;
        this.dataPrevista = dataPrevista;
        this.id = id;
        this.idLast = id;
        produto.alterarStatusProduto(StatusProduto.ALUGADO);
    }

    public double calcularJuros() {
        //calculo de juros, pega a diferença de dias e multiplica pelo valor da multa

        if (dataDevolucao.after(dataPrevista)) {

            double diff = Math.abs(dataDevolucao.getTime() - dataPrevista.getTime());
            double diffDays = diff / (24 * 60 * 60 * 1000);
            return diffDays * valorMulta;
            
        } else {
            return 0.0;
        }

    }

    public double gerarValorPagar(Date dataD) {

        this.dataDevolucao = dataD;

        double diff = Math.abs(dataDevolucao.getTime() - dataRetirada.getTime());
        double diffDays = diff / (24 * 60 * 60 * 1000);

        precoTotal = (produto.precoPorDia * diffDays) + calcularJuros();

        return precoTotal;

    }

    //gerados automaticamente
    public Date getDataRetirada() {
        return dataRetirada;
    }

    public Date getDataPrevista() {
        return dataPrevista;
    }

    public Date getDataDevolucao() {
        return dataDevolucao;
    }

    public double getPrecoTotal() {
        return precoTotal;
    }

    public double getValorMulta() {
        return valorMulta;
    }

    public Cliente getCliente() {
        return cliente;
    }

    public Produto getProduto() {
        return produto;
    }

    public int getId() {
        return id;
    }
    
    

    @Override
    public String toString() {
        SimpleDateFormat s = new SimpleDateFormat("dd/MM/yyyy");
        String data = (dataDevolucao == null)?"Produto não devolvido!":s.format(dataDevolucao);

        return "ID: " + id 
                + "\n / Cliente: " + cliente.toString() + " / Produto: " + produto.getModeloProduto() 
                + "\n / Data de Retirada: " + s.format(dataRetirada)+ " / Data Prevista de devolução: " + s.format(dataPrevista)
                + "\n / Preço total: " + precoTotal + " / Valor de multa: " + valorMulta 
                + "\n / Data de Devolução: " + data;
    }

}
