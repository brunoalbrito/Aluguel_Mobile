package br.com.mackenzie.model;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Locacao
//  @ File Name : Controle.java
//  @ Date : 23/05/2016
//  @ Author : 
//
//

public class Controle {

    private List<Cliente> clientes;
    private List<Produto> produtos;
    private List<Fornecedor> fornecedores;
    private List<Locacao> locacoes;
    Scanner entrada = new Scanner(System.in);

    public Controle() {
        //Inicializando lista com elementos do sistema
        clientes = new ArrayList();
        produtos = new ArrayList();
        fornecedores = new ArrayList();
        locacoes = new ArrayList();

        //Lendo arquivos Txt que possuem elementos do sistema já salvos
    }

    //Métodos para a classe Cliente
    public Cliente consultaCliente(int codigo) {
        //verifica, a partir do CPF ou CNPJ, se o cliente já está cadastrado no Sistema
        //Percorrendo lista de clientes para encontrar cliente desejado
        for (Cliente cliente : clientes) {
            if (cliente instanceof Fisico) {
                Fisico fisico = (Fisico) cliente;
                if (fisico.getCPF() == codigo) {
                    return fisico;
                }
            } else {
                Juridico juridico = (Juridico) cliente;
                if (juridico.getCNPJ() == codigo) {
                    return juridico;
                }
            }
        }
        return null;
    }

    public void cadastrarCliente() {

        //Método para validar informações digitadas pelo funcionário da loja, validá-las e criar um novo Cliente
        System.out.println("Novo cliente 1 -Físico ou 2 - Jurídico?");
        int opcao = entrada.nextInt();

        if (opcao == 1) {
            System.out.println("Nome: ");
            String nome = entrada.next();
            System.out.println("CPF: ");
            int CPF = entrada.nextInt();
            System.out.println("Telefone: ");
            int tel = entrada.nextInt();
            System.out.println("Endereço: ");
            String endereco = entrada.next();
            Fisico f = new Fisico(nome, CPF, endereco, tel);

            clientes.add(f);

        }
        if (opcao == 2) {

            System.out.println("Nome Fantasia: ");
            String nome = entrada.next();
            System.out.println("CNPJ: ");
            int CNPJ = entrada.nextInt();
            System.out.println("Telefone: ");
            int tel = entrada.nextInt();
            System.out.println("Endereço: ");
            String endereco = entrada.next();
            Juridico j = new Juridico(nome, CNPJ, endereco, tel);

            clientes.add(j);
        }

    }

    public void alterarDadosCliente() {

        //altera os dados dos clientes    
        System.out.println("Digite o CPF ou CNPJ");

        int codigo = entrada.nextInt();

        Cliente c = consultaCliente(codigo);

        if (c != null) {

            if (c instanceof Fisico) {
                Fisico f = ((Fisico) c);
                System.out.println(f.toString());
                System.out.println("Informe o novo nome");
                String nomeCompleto = entrada.next();
                System.out.println("Informe o novo CPF");
                int CPF = entrada.nextInt();
                System.out.println("Informe o novo Endereço");
                String endereco = entrada.next();
                System.out.println("Informe o novo Telefone");
                int telefone = entrada.nextInt();

                f.alterarDados(nomeCompleto, CPF, endereco, telefone);
            }
            if (c instanceof Juridico) {
                Juridico j = ((Juridico) c);
                System.out.println(j.toString());
                System.out.println("Informe o novo Nome Fantasia");
                String nomeFantasia = entrada.next();
                System.out.println("Informe o novo CPF");
                int CNPJ = entrada.nextInt();
                System.out.println("Informe o novo CNPJ");
                String endereco = entrada.next();
                System.out.println("Informe o novo Telefone");
                int telefone = entrada.nextInt();
                j.alterarDados(nomeFantasia, CNPJ, endereco, telefone);
            }

        } else {
            System.out.println("Cliente nao encontrado");
        }

    }

    //Métodos para a Classe Produto
    public void acrescentarProduto() throws ParseException {
        SimpleDateFormat formatador = new SimpleDateFormat("yyyy");
        System.out.println("Criando um produto:"
                + "\n Primeiramente selecione se seu produto é 1 - Smartphone ou 2 - Tablet");
        int opc = entrada.nextInt();

        System.out.println("Modelo do produto: ");
        String modeloProduto = entrada.next();
        System.out.println("1- Android / 2- Apple / 3- Windows Phone / 4- outros");
        //corrigir que é erro
        int enu = entrada.nextInt();
        System.out.println("Ano de fabricação (yyyy)");
        String data = entrada.next();
        System.out.println("Polegadas na tela: ");
        double pol = entrada.nextDouble();
        System.out.println("Resolução da tela (ppi):");
        String telaResolucao = entrada.next();
        System.out.println("Fabricante: ");
        String fabricante = entrada.next();
        System.out.println("Fornecedor cadastrado no sistema: ");
        int codigoF = entrada.nextInt();
        Fornecedor f = selecionarFornecedor(codigoF);
        System.out.println("Preço por dia: ");
        double preco = entrada.nextDouble();
        System.out.println("Acessorios: ");
        String acess = entrada.next();

        if (opc == 1) {

            System.out.println("Resolução da camera: ");
            double resolu = entrada.nextDouble();
            System.out.println("Rede: 3 - 3G / 4 - 4G");
            char rede = entrada.next().charAt(0);
            System.out.println("Dual chip 1 - Sim / 2 - Não");
            boolean dual = (entrada.nextInt() == 1);
            System.out.println("Sistema Operacional "
                    + "\n1 - ANDROID"
                    + "\n2 - APPLE"
                    + "\n3 - WINDOWS PHONE "
                    + "\n4 - NAO INFORMADO");
            int choose = entrada.nextInt();

            SO sistemaO = null;
            switch (choose) {
                case 1:
                    sistemaO = SO.ANDROID;
                    break;
                case 2:
                    sistemaO = SO.APPLE;
                    break;
                case 3:
                    sistemaO = SO.WINDOWS_PHONE;
                    break;
                case 4:
                    sistemaO = SO.NAOINFORMADO;
                    break;
            }

            Smartphone s = new Smartphone(modeloProduto, sistemaO, formatador.parse(data), pol, telaResolucao, fabricante, f, preco, acess, resolu, rede, dual);

            produtos.add(s);
        }
        if (opc == 2) {

            System.out.println("Tem camera? 1 - Sim / 2 - Não");
            boolean camera = (entrada.nextInt() == 1);
            System.out.println("Acessa a rede? 1 - Sim / 2 - Não");
            boolean conexao = (entrada.nextInt() == 1);
            System.out.println("Sistema Operacional "
                    + "\n1 - ANDROID"
                    + "\n2 - APPLE"
                    + "\n3 - WINDOWS PHONE "
                    + "\n4 - NAO INFORMADO");
            int choose = entrada.nextInt();

            SO sistemaO = null;
            switch (choose) {
                case 1:
                    sistemaO = SO.ANDROID;
                    break;
                case 2:
                    sistemaO = SO.APPLE;
                    break;
                case 3:
                    sistemaO = SO.WINDOWS_PHONE;
                    break;
                case 4:
                    sistemaO = SO.NAOINFORMADO;
                    break;
            }

            Tablet t = new Tablet(modeloProduto, sistemaO, formatador.parse(data), pol, telaResolucao, fabricante, f, preco, acess, camera, conexao);

            produtos.add(t);
        }

    }

    public void visualizarProdutos() {

    }

    public void alterarDadosProduto() {

    }

    public void excluirProduto() {

    }

    public void selecionarProduto() {

    }

    //Métodos para a Classe Fornecedor
    public void acrescentarFornecedor() {
        //pede os dados de entrada e cria um fornecedor
        System.out.println("Nome do Fornecedor: ");
        String nome = entrada.next();
        System.out.println("Telefone para contato: ");
        int tel = entrada.nextInt();

        Fornecedor f = new Fornecedor(nome, tel);
        fornecedores.add(f);

    }

    public void consultarFonecedor() {

        //consulta por uma String e devolve todas as matches
        System.out.println("Qual o nome do fornecedor?");
        String nome = entrada.next();

        System.out.println("Resultados para a sua busca:");
        for (Fornecedor f : fornecedores) {
            if (f.getNomeFornecedor().matches(nome)) {
                System.out.println("Código: " + f.getCod() + " / Nome: " + f.getNomeFornecedor() + " / tel: " + f.getTel());
            }
        }

    }

    public void alterarDadosFornecedor() {

        //atualiza os dados de um fornecedor selecionado
        System.out.println("Qual o fornecedor?");
        int selec = entrada.nextInt();

        if (selecionarFornecedor(selec) != null) {
            Fornecedor f = selecionarFornecedor(selec);

            System.out.println("Altere o nome ou reescreva-o:");
            String novoNome = entrada.next();
            System.out.println("Altere o telefone ou reescreva-o:");
            int novoTel = entrada.nextInt();

            f.setNomeFornecedor(novoNome);
            f.setTel(novoTel);
        } else {
            System.out.println("Fornecedor não encontrado");
        }

    }

    public void excluirFornecedor() {

        //exclui diretamente um fornecedor do array
        System.out.println("Qual o fornecedor?");
        int selec = entrada.nextInt();

        if (selecionarFornecedor(selec) != null) {
            fornecedores.remove(selecionarFornecedor(selec));
        } else {
            System.out.println("Fornecedor não encontrado");
        }

    }

    public Fornecedor selecionarFornecedor(int cod) {

        //procura um Fornecedor pelo codigo e o devolve quando encontrá-lo
        for (Fornecedor f : fornecedores) {
            if (f.getCod() == cod) {
                return f;
            }
        }
        return null;
    }

    //Métodos para a Classe Locação
    public void registrarLocacao() {
    }

    public void finalizarLocacao() {
    }

    public void gerarRelatorio() {
    }

    //Métodos para inicializar lista de componenetes do sistema a partir de arquivos txt
    private void inicializarClientes(String file) {

        try {
            BufferedReader in = new BufferedReader(new FileReader(file));

        } catch (IOException | NumberFormatException e) {
            System.exit(-1);
        }

    }

    private void inicializarProdutos(String file) {

        try {
            BufferedReader in = new BufferedReader(new FileReader(file));

        } catch (IOException | NumberFormatException e) {
            System.exit(-1);
        }

    }

    private void inicializarFornecedores(String file) {

        try {
            BufferedReader in = new BufferedReader(new FileReader(file));

        } catch (IOException | NumberFormatException e) {
            System.exit(-1);
        }

    }

    private void inicializarLocacoes(String file) {

        try {
            BufferedReader in = new BufferedReader(new FileReader(file));

        } catch (IOException | NumberFormatException e) {
            System.exit(-1);
        }

    }
}
